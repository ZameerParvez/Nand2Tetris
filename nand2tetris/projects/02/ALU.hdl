// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // implement behaviour for zx and nx
    Not(in=zx,out=zerox);
    // could have used Mux16 for zeroeing too
    // Mux16(a=x,b=false,sel=zx,out=zworkingx);
    BitTo16(in=zerox,out=zerox16);
    And16(a=x,b=zerox16,out=zworkingx);
    Not16(in=zworkingx,out=nworkingx);
    Mux16(a=zworkingx,b=nworkingx,sel=nx,out=workingx);

    // implement behaviour for zy and ny
    Not(in=zy,out=zeroy);
    BitTo16(in=zeroy,out=zeroy16);
    And16(a=y,b=zeroy16,out=zworkingy);
    Not16(in=zworkingy,out=nworkingy);
    Mux16(a=zworkingy,b=nworkingy,sel=ny,out=workingy);

    // implement behaviour for f and no
    And16(a=workingx,b=workingy,out=fAnd);
    Add16(a=workingx,b=workingy,out=fAdd);
    Mux16(a=fAnd,b=fAdd,sel=f,out=workingf);
    Not16(in=workingf,out=nworkingf);
    Mux16(a=workingf,b=nworkingf,sel=no,out=tempout);
    Copy16(in=tempout,out=out);

    // implement behaviour for ng
    // negative if most significant bit is 
    // cant use sub bus of internal node, so made a new chip type
    // could have done
    // And16(a=output, b=true, out[15]=ng);
    AndSigBit16(a=tempout,b=true,out=ng);

    // implement behaviour for zr
    // how to check for 0? must check that all bits are 0, or if any bits are 1, e.g. if 16wayOr(out, 0) returns 1
    Or16Way(in=tempout,out=nzr);
    Not(in=nzr,out=zr);
}